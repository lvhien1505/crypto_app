import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import authApi from 'apis/authApi';

const initialState = {
    token: null,
    statusLogin: 'idle',
    statusRegister: 'idle',
    user: {},
};

export const login = createAsyncThunk(
    'auth/login',
    async (account, { rejectWithValue }) => {
        try {
            const response = await authApi.login(account);
            // The value we return becomes the `fulfilled` action payload
            return response.data;
        } catch (error) {
            return rejectWithValue(error.response.data);
        }
    }
);

export const register = createAsyncThunk(
    'auth/register',
    async (account, { rejectWithValue }) => {
        try {
            const response = await authApi.register(account);
            // The value we return becomes the `fulfilled` action payload
            return response.data;
        } catch (error) {
            return rejectWithValue(error.response.data);
        }
    }
);

export const auth = createAsyncThunk(
    'auth/auth',
    async (data, { rejectWithValue }) => {
        try {
            const response = await authApi.auth();
            // The value we return becomes the `fulfilled` action payload
            return response.data;
        } catch (error) {
            return rejectWithValue(error.response.data);
        }
    }
);

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        loadingLogin: (state) => {
            state.statusLogin = 'loading';
        },
        loadingRegister: (state) => {
            state.statusRegister = 'loading';
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(login.pending, (state) => {
                state.statusLogin = 'loading';
            })
            .addCase(login.fulfilled, (state, action) => {
                state.statusLogin = 'idle';
                state.user = action.payload.data;
            })
            .addCase(login.rejected, (state) => {
                state.statusLogin = 'idle';
            })
            .addCase(register.pending, (state) => {
                state.statusRegister = 'loading';
            })
            .addCase(register.fulfilled, (state) => {
                state.statusRegister = 'idle';
            })
            .addCase(register.rejected, (state) => {
                state.statusRegister = 'idle';
            })
            .addCase(auth.fulfilled, (state, action) => {
                state.user = action.payload.data;
            });
    },
});

export const { loadingLogin, loadingRegister } = authSlice.actions;

export default authSlice.reducer;
